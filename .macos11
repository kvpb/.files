#!/usr/bin/env bash

default='\033[0;39m'
hidefault='\033[0;30;39m'
white='\033[0;37m'
hiwhite='\033[0;30;47m'
litred='\033[0;91m'
hilitred='\033[0;30;91m'
litgreen='\033[0;92m'
hilitgreen='\033[1;30;92m'
litblue='\033[0;94m'
hilitblue='\033[0;30;94m'
litgray='\033[0;37m'
hilitgray='\033[0;30;37m'
litcyan='\033[0;96m'
hilitcyan='\033[0;30;96m'
litmagenta='\033[0;95m'
hilitmagenta='\033[0;30;95m'
lityellow='\033[0;93m'
hilityellow='\033[0;30;93m'
key='\033[0;30m'
hikey='\033[0;97;40m'
# Set graphics mode. (i) ANSI escape sequences format: \033[${textattribute};${foregroundcolor};${backgroundcolor}m (or esc[${value};...;${value}m).
clearedstyleandformatting=`tput sgr0` #${capname} = 'sgr0' # Turn off _all_ attribute modes.

function cecho
{
	local string="${1}"
	local color="${2}"

	echo "${color}${string}${clearedstyleandformatting}"
	return
} # color echo (Jo√£o Cunha `joaocunha`) improved (Brandon Brown `brandonb927`) custom (Karl Bertin `kvpb`)

echo ''
cecho '                             ^  (^)  /|  /| |^)         (^)' ${litred}
cecho '                |v| /\| /^\ ( )  \  / | / | |<   o  /\|  \  | | |^\' ${litred}
cecho '             .  | | \/| \_   V  (_)   |   | |_)  |  \/| (_) \_/ |' ${litred}
cecho '                                                    __/' ${litred}
cecho '                                 LICENSED BY' ${litred}
cecho '                                 ${LICENSOR}' ${litred}
echo ''
cecho "                            K K  V V  PPP  BB   '" ${litred}
cecho '                           KK   V V  PPP  BBB     SS' ${litred}
cecho '                          K K   V   P    BBB     SS' ${litred}
echo ''
cecho '                 WARNING: USE THIS SCRIPT AT YOUR OWN RISK.' ${litred}
echo ''
cecho " ALL THE COMPUTER PROGRAMS  AND SOFTWARE ARE PROVIDED 'AS IS'  WITHOUT WARRANTY" ${litred}
cecho ' OF ANY KIND.  WE MAKE NO WARRANTIES,  EXPRESS  OR IMPLIED,  THAT THEY ARE FREE' ${litred}
cecho ' OF ERROR,  OR ARE CONSISTENT  WITH ANY PARTICULAR STANDARD OF MERCHANTABILITY,' ${litred}
cecho ' OR THAT THEY WILL MEET YOUR REQUIREMENTS FOR ANY PARTICULAR APPLICATION.  THEY' ${litred}
cecho ' SHOULD NOT BE  RELIED ON FOR SOLVING A PROBLEM  WHOSE INCORRECT SOLUTION COULD' ${litred}
cecho ' RESULT  IN  INJURY  TO  A  PERSON  OR  LOSS  OF  PROPERTY.  IF YOU DO USE THEM' ${litred}
cecho ' IN SUCH A MANNER,  IT IS AT YOUR OWN RISK.  THE AUTHOR  AND PUBLISHER DISCLAIM' ${litred}
cecho ' ALL LIABILITY FOR  DIRECT,  INDIRECT,  OR CONSEQUENTIAL DAMAGES RESULTING FROM' ${litred}
cecho ' YOUR USE OF THE PROGRAMS.' ${litred}
echo ''
say --voice=Fiona 'Ta-da!'
# Display the title screen with the disclaimer.

sudo -v # Ask for an administrator password.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null & # Update the sudo timestamp until the script is over.

#csrutil disable # Disable the System Integrity Protection. /!\ 'This tool needs to be executed from the Recovery OS.' (csrutil, OS X 10.11 El Capitan) (i) introduced in OS X 10.11 El Capitan. # I just type this here for the record.

#osascript -e 'tell application "System Preferences" to quit' # Quit any System Preferences pane to prevent them from overriding this script.
killall System\ Preferences # Kill System Preferences.

cecho 'First-Party Settings: Systemwide And User-Specific Preferences' ${lityellow}

echo 'Unnamed'

sudo spctl --master-disable #sudo defaults write /var/db/SystemPolicy enabled -string NO # Allow apps downloaded from anywhere. (Disable GateKeeper.)

chsh -s /bin/bash # Set BASH as login shell.

defaults write com.apple.LaunchServices LSQuarantine -bool FALSE # Do not warn when opening an application.

#sudo pmset -a disksleep 0 # Do not put hard disks to sleep when possible. (i) A trick for Apple computers without HDD.

#sudo pmset -a sms 0 # Disable the sudden motion sensor. (i) A trick for Apple laptops without HDD.

sudo systemsetup -setrestartfreeze on # Restart automatically if the computer freezes.

defaults write -g AppleLanguages -array "en" "fr" # Set US english and FR french as preferred languages.
defaults write -g AppleLocale -string "en_US@currency=EUR" # Set US english as format language and euro as currency.
defaults write -g AppleMeasurementUnits -string "Centimeters" # Set centimeters as measurement unit.
defaults write -g AppleMetricUnits -bool TRUE
# Set the language and text formats.

systemsetup -settimezone "Europe/Paris" > /dev/null # Set the timezone. (i) See `sudo systemsetup -listtimezones` for other values.

sudo systemsetup -setusingnetworktime on # Enable network time use.

sudo systemsetup -setnetworktimeserver "time.euro.apple.com" # Set network time server.

echo 'Directory Layout'

sudo mkdir -p /usr/local/bin # Adapt to the SIP--- for the better, this time.

sudo ln -s /usr/libexec/PlistBuddy /usr/local/bin/PlistBuddy
sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
sudo ln -s /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc /usr/local/bin/jsc
# Write system-wide custom symbolic links. (i) From OS X 10.11 El Capitan onwards, the SIP prevents writing to /usr/ except /usr/local/. # In turn, /usr/local/bin was created beforehand.

if [ -e "/Applications/{Directory Utility,Network Utility,Finder,Archive Utility}.app" ];
then
	mv /Applications/Directory\ Utility.app ${HOME}/.Trash/
	mv /Applications/Network\ Utility.app ${HOME}/.Trash/
	mv /Applications/Finder.app ${HOME}/.Trash/
	mv /Applications/Archive\ Utility.app ${HOME}/.Trash/
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Directory Utility.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Network Utility.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Finder.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Archive Utility.app") at (POSIX file "/Applications")'
else
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Directory Utility.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Network Utility.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Finder.app") at (POSIX file "/Applications")'
	sudo osascript -e 'tell application "Finder" to make alias file to (POSIX file "/System/Library/CoreServices/Applications/Archive Utility.app") at (POSIX file "/Applications")'
fi
# Write system-wide custom aliases.

echo 'Network'

macmodelname=$(system_profiler SPHardwareDataType | grep "Model Name" | cut -c19-)
echo "What is your name?"
read userfullname
sudo scutil --set ComputerName "${userfullname}'s ${macmodelname}"
sudo scutil --set HostName "${userfullname}'s ${macmodelname}"
macmodelname2=$(echo ${macmodelname} | sed 's/ //')
sudo scutil --set LocalHostName "KVPBs${macmodelname2}"
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "${userfullname}'s ${macmodelname}"

echo 'Login Window & Screen Saver (NSGlobalDomain, com.apple.loginwindow, com.apple.HIToolbox.loginwindow, com.apple.screensaver)'

sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser "" # Disable automatic login.

sudo /usr/libexec/PlistBuddy -c "Add :AppleCurrentKeyboardLayoutInputSourceID string com.apple.keylayout.US" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleCurrentKeyboardLayoutInputSourceID com.apple.keylayout.US" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox dict" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :com.apple.HIToolbox:AppleDefaultAsciiInputSource" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleDefaultAsciiInputSource array" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleDefaultAsciiInputSource:InputSourceKind string Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
#sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleDefaultAsciiInputSource:InputSourceKind Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleDefaultAsciiInputSource:KeyboardLayout\ ID integer ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
#sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleDefaultAsciiInputSource:KeyboardLayout\ ID ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleDefaultAsciiInputSource:KeyboardLayout\ Name string U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
#sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleDefaultAsciiInputSource:KeyboardLayout\ Name U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :com.apple.HIToolbox:AppleEnabledInputSources" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleEnabledInputSources array" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleEnabledInputSources:0 dict" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleEnabledInputSources:0:InputSourceKind string Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleEnabledInputSources:0:InputSourceKind Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleEnabledInputSources:0:KeyboardLayout\ ID integer ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleEnabledInputSources:0:KeyboardLayout\ ID ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleEnabledInputSources:0:KeyboardLayout\ Name string U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleEnabledInputSources:0:KeyboardLayout\ Name U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :com.apple.HIToolbox:AppleSelectedInputSources" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleSelectedInputSources array" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleSelectedInputSources:0 dict" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleSelectedInputSources:0:InputSourceKind string Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleSelectedInputSources:0:InputSourceKind Keyboard\ Layout" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleSelectedInputSources:0:KeyboardLayout\ ID integer ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleSelectedInputSources:0:KeyboardLayout\ ID ${keyboardlayoutid}" "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Add :com.apple.HIToolbox:AppleSelectedInputSources:0:KeyboardLayout\ Name string U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
sudo /usr/libexec/PlistBuddy -c "Set :com.apple.HIToolbox:AppleSelectedInputSources:0:KeyboardLayout\ Name U.S." "/var/tmp/com.apple.HIToolbox.loginwindow.plist"
# Add login window input keyboard layout, and set it to US.

sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool TRUE
#sudo defaults write /var/ard/Library/Preferences/com.apple.menuextra.textinput ModeNameVisible -bool TRUE
sudo chmod 777 /Library/Preferences/com.apple.loginwindow.plist
# Display Input keyboard layout menu in the login window.

sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName # Display IP address, hostname, OS version etc when clicking the clock in the login window.

#echo "What is the phone number with country code of the owner of this Mac?"
#echo "(E.g. '+33 6 XX XX XX XX' for french mobile phone numbers.)"
#read phonenumber
#echo "What is the email address of the owner of this Mac?"
#read emailaddress
#sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "${userfullname}'s ${macmodelname}.\nPlease contact ${phonenumber} or ${emailaddress} if found."
# Set and display lock message. (i) userfullname and macmodelname variables have been set earlier, at Network: Computer name.
sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "Karl V. P. Bertin's ${macmodelname}.\nPlease contact both +33 6 33 78 48 93 and karlvp.bertin@gmail.com if found. USD10,000.00 reward." # Display set lock message. (i) computername variable has been set earlier, at Network: Computer name.

defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0
# Require password immediately after sleep or screen saver begins. (Enable Require Password Immediately After Sleep Or Screen Saver Begins.)

echo 'Keyboard & Touch Bar (NSGlobalDomain, com.apple.HIToolbox, com.apple.universalaccess)'

sudo /usr/libexec/PlistBuddy -c "Add :AppleCurrentKeyboardLayoutInputSourceID string com.apple.keylayout.US" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleCurrentKeyboardLayoutInputSourceID com.apple.keylayout.US" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :AppleDefaultAsciiInputSource" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleDefaultAsciiInputSource:InputSourceKind Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:KeyboardLayout\ ID integer 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleDefaultAsciiInputSource:KeyboardLayout\ ID 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:KeyboardLayout\ Name string U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleDefaultAsciiInputSource:KeyboardLayout\ Name U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :AppleEnabledInputSources" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0 dict" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleEnabledInputSources:0:InputSourceKind Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:KeyboardLayout\ ID integer 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleEnabledInputSources:0:KeyboardLayout\ ID 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:KeyboardLayout\ Name string U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
#sudo /usr/libexec/PlistBuddy -c "Set :AppleEnabledInputSources:0:KeyboardLayout\ U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Delete :AppleSelectedInputSources" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0 dict" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleSelectedInputSources:0:InputSourceKind Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:KeyboardLayout\ ID integer 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleSelectedInputSources:0:KeyboardLayout\ ID 0" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:KeyboardLayout\ Name string U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Set :AppleSelectedInputSources:0:KeyboardLayout\ Name U.S." "/Library/Preferences/com.apple.HIToolbox.plist"
sudo chown root:admin "/Library/Preferences/com.apple.HIToolbox.plist"
sudo chmod 644 "/Library/Preferences/com.apple.HIToolbox.plist"
# Add system input keyboard layout, and set it to US.
sudo /usr/libexec/PlistBuddy -c "Add :AppleCurrentKeyboardLayoutInputSourceID string com.apple.keylayout.UnicodeHexInput" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:KeyboardLayout\ ID integer -1" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleDefaultAsciiInputSource:KeyboardLayout\ Name string Unicode\ Hex\ Input" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0 dict" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:KeyboardLayout\ ID integer -1" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleEnabledInputSources:0:KeyboardLayout\ Name string Unicode\ Hex\ Input" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0 dict" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:InputSourceKind string Keyboard\ Layout" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:KeyboardLayout\ ID integer -1" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo /usr/libexec/PlistBuddy -c "Add :AppleSelectedInputSources:0:KeyboardLayout\ Name string Unicode\ Hex\ Input" "/Library/Preferences/com.apple.HIToolbox.plist"
sudo chown root:admin "/Library/Preferences/com.apple.HIToolbox.plist"
sudo chmod 644 "/Library/Preferences/com.apple.HIToolbox.plist"
# Add Unicode hex input system input keyboard layout.

defaults write -g AppleKeyboardUIMode -int 3 # Enable full keyboard access for all controls.

defaults write -g NSUserKeyEquivalents '{Zoom = "@$m";}'
# Add Shift-Command-M 'Maximize window' keyboard app shortcut. # It doesn't work so well, e.g. in Chrome, it fully expands a window resized to 50% of the desktop's width to fill the desktop, but it doesn't just refit the window to Chrome's default size which is a bit larger.

sudo defaults write com.apple.universalaccess slowKey -bool FALSE # Disable Slow Keys. /i\ required from macOS 10.12 Sierra onwards to set faster key repeat rates.
defaults write -g ApplePressAndHoldEnabled -bool FALSE # Disable press-and-hold for keys.
defaults write -g InitialKeyRepeat -int 10 # Set even shorter key repeat triggering delay. /!\ ‚â§10: NS SOM PARTY MN BRAV MYLOO (i) 15: GUI fastest
#sudo defaults write com.apple.universalaccess slowKeyDelay -int 5
defaults write -g KeyRepeat -int 1 # Set faster key repeat rate. (Enable key repeat.)

sudo defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool TRUE
sudo defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
# Use scroll gesture with Strg (‚åÉ) modifier key to zoom. # Because back then, I had a QWERTZ Model M keyboard. Deutsche Qualit√§t.
sudo defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool TRUE # Follow the keyboard focus while zoomed in.

defaults write -g NSAutomaticSpellingCorrectionEnabled -bool FALSE # Disable automatic spell correction.

defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool FALSE
defaults write -g NSAutomaticDashSubstitutionEnabled -bool FALSE
# Disable smart quotes and dashes; set smart double and single quotes to defaults.

defaults write ${HOME}/Library/Preferences/.GlobalPreferences.plist NSUserDictionaryReplacementItems -array \
                                                                                                            '{ on = 1; replace = "\\llrda"; with = "\U27fa"; }' \
                                                                                                            '{ on = 1; replace = "\\fa"; with = "\U2200"; }' \
                                                                                                            '{ on = 1; replace = "\\eo"; with = "\U2208"; }' \
                                                                                                            '{ on = 1; replace = "\\naeo"; with = "\U2209"; }' \
                                                                                                            '{ on = 1; replace = "\\N"; with = "\U2115"; }' \
                                                                                                            '{ on = 1; replace = "\\Z"; with = "\U2124"; }' \
                                                                                                            '{ on = 1; replace = "\\R"; with = "\U211d"; }' \
                                                                                                            '{ on = 1; replace = "\\C"; with = "\U2102"; }' \
                                                                                                            '{ on = 1; replace = "\\lamda"; with = "\U03bb"; }' \
                                                                                                            '{ on = 1; replace = "\\times"; with = "\U00d7"; }' \
                                                                                                            '{ on = 1; replace = "\\omega"; with = "\\U03c9"; }' \
                                                                                                            '{ on = 1; replace = "\\psi"; with = "\U03c8"; }' \
                                                                                                            '{ on = 1; replace = "\\chi"; with = "\U03c7"; }' \
                                                                                                            '{ on = 1; replace = "\\phi"; with = "\U03c6"; }' \
                                                                                                            '{ on = 1; replace = "\\upsilon"; with = "\U03c5"; }' \
                                                                                                            '{ on = 1; replace = "\\tau"; with = "\U03c4"; }' \
                                                                                                            '{ on = 1; replace = "\\sigma"; with = "\U03c3"; }' \
                                                                                                            '{ on = 1; replace = "\\rho"; with = "\U03c1"; }' \
                                                                                                            '{ on = 1; replace = "\\pi"; with = "\U03c0"; }' \
                                                                                                            '{ on = 1; replace = "\\omicron"; with = "\U03bf"; }' \
                                                                                                            '{ on = 1; replace = "\\zi"; with = "\U03be"; }' \
                                                                                                            '{ on = 1; replace = "\\nu"; with = "\U03bd"; }' \
                                                                                                            '{ on = 1; replace = "\\mu"; with = "\U03bc"; }' \
                                                                                                            '{ on = 1; replace = "\\kappa"; with = "\U03ba"; }' \
                                                                                                            '{ on = 1; replace = "\\iota"; with = "\U03b9"; }' \
                                                                                                            '{ on = 1; replace = "\\theta"; with = "\U03b8"; }' \
                                                                                                            '{ on = 1; replace = "\\eta"; with = "\U03b7"; }' \
                                                                                                            '{ on = 1; replace = "\\zeta"; with = "\U03b6"; }' \
                                                                                                            '{ on = 1; replace = "\\epsilon"; with = "\U03b5"; }' \
                                                                                                            '{ on = 1; replace = "\\delta"; with = "\U03b4"; }' \
                                                                                                            '{ on = 1; replace = "\\gamma"; with = "\U03b3"; }' \
                                                                                                            '{ on = 1; replace = "\\beta"; with = "\U03b2"; }' \
                                                                                                            '{ on = 1; replace = "\\alpha"; with = "\U03b1"; }'
# Set the text substitutions.

echo 'Mouse & Trackpad (NSGlobalDomain, com.apple.driver.AppleHIDMouse, com.apple.driver.AppleBluetoothMultitouch.trackpad, com.apple.dock)'

defaults write com.apple.driver.AppleHIDMouse.plist Button2 -int 2 # Enable mouse secondary click.

defaults -currentHost write -g com.apple.trackpad.trackpadCornerClickBehaviour -int 1
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool TRUE
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 1
defaults -currentHost write -g com.apple.trackpad.enableSecondaryClick -bool TRUE
# Enable trackpad secondary click, and set it to click or tap with two fingers. # Enter `defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2` to map bottom-right click to secondary click.

defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool TRUE
defaults -currentHost write -g com.apple.mouse.tapBehavior -int 1
defaults write -g com.apple.mouse.tapBehavior -int 1
# Enable trackpad tap to click for current user and login screen.

defaults write -g com.apple.mouse.scaling -int 3 # Set mouse tracking speed to fast. (i) 0: slow; 3: fast.
#defaults write -g com.apple.scrollwheel.scaling -float 1.7 # Set mouse scroll wheel scrolling speed to fast. (i) 0: slow; 1.7: fast. /!\ seems to cause drag and drop in Finder to become slow to unresponsive.
#defaults write -g com.apple.mouse.doubleClickThreshold -float 3.8625 # Set mouse double click needed speed to 75%. /!\ seems to cause drag and drop in Finder to become slow to unresponsive.

defaults write -g com.apple.trackpad.scaling -int 3 # Set trackpad tracking speed to fast. (i) 0: slow; 3: fast.

defaults write -g com.apple.swipescrolldirection -bool TRUE # Enable natural (OS X 10.7 Lion-style) scroll direction. (Enable System Preferences: TrackPad: Scroll & Zoom: Scroll Direction: natural.)

defaults write -g AppleEnableSwipeNavigateWithScrolls -bool TRUE
defaults -currentHost write -g com.apple.trackpad.threeFingerHorizSwipeGesture -int 0
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerHorizSwipeGesture -int 1
# Scroll left or right with two fingers to swipe between pages. (Enable System preferences: TrackPad: More gestures: Swipe between pages: Scroll left or right with two fingers.)

defaults write com.apple.dock showLaunchpadGestureEnabled -int 0 # Disable trackpad Launchpad gesture (pinch with thumb and three fingers).

echo "'Displays' & Display Server (NSGlobalDomain, com.apple.windowserver)"

sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool TRUE # Enable Hi-DPI display modes. /!\ requires a restart.

defaults write -g AppleFontSmoothing -int 2 # Enable medium subpixel font rendering on non-Apple LCD displays. (Enable Use LCD Font Smoothing When Available.)

echo "'Printers' (com.apple.print.PrintingPrefs)"

defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool TRUE # Automatically quit printer app when printing is over.

#echo "Airplay ('Displays' & Display server)"

echo 'AirPort (Network, or Ethernet & Wi-Fi)'

networksetup -setairportpower en0 on # Enable Wi-Fi.

echo 'Bluetooth & Bluetooth Setup Assistant (com.apple.Bluetooth, com.apple.BluetoothAudioAgent)'

sudo defaults write /Library/Preferences/com.apple.Bluetooth BluetoothAutoSeekKeyboard '1' # Launch Bluetooth setup assistant at startup if no keyboard is detected.

sudo defaults write /Library/Preferences/com.apple.Bluetooth BluetoothAutoSeekPointingDevice '1' # Launch Bluetooth setup assistant at startup if no mouse or trackpad is detected.

#defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Max (editable)" -int 80
#defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 80
#defaults write com.apple.BluetoothAudioAgent "Apple Initial Bitpool (editable)" -int 80
#defaults write com.apple.BluetoothAudioAgent "Apple Initial Bitpool Min (editable)" -int 80
#defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool" -int 80
#defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool Max" -int 80
#defaults write com.apple.BluetoothAudioAgent "Negotiated Bitpool Min" -int 80
# 

if [ "$(defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState)" = '0' ] # If Bluetooth is turned off,
then
	sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 1 # enable Bluetooth,
	#sudo launchctl unload /System/Library/LaunchDaemons/com.apple.bluetoothd.plist && sudo launchctl load /System/Library/LaunchDaemons/com.apple.bluetoothd.plist # Reload the Bluetooth daemon.
	#sudo launchctl stop com.apple.bluetoothd && sudo launchctl start com.apple.bluetoothd # Restart the Bluetooth daemon.
	sudo killall -HUP bluetoothd # Send SIGTERM to BluetoothD.
	# and restart the Bluetooth daemon.
fi # Turn on Bluetooth. (i) From OS X 10.11 El Capitan onwards, blued was renamed bluetoothd.

echo 'Data Storage Devices'

#sudo nvram boot-args="mbasd=1" # Enable the MacBook Air SuperDrive on any Mac. (i) From OS X 10.11 El Capitan onwards, the SIP prevents writing firmware NVRAM variables. To disable SIP, start up the computer in macOS Recovery, launch Terminal, and enter `csrutil disable`. To enable SIP without restriction on writing to NVRAM, start up the computer in macOS Recovery, launch Terminal, and enter `csrutil enable --without nvram`.

#echo "AppleScript & Script Editor"

#echo 'Dwell Control (Universal Access)'

echo 'Time Machine'

defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool TRUE # Disable local Time Machine prompting to use new drives as backup volumes.

#sudo tmutil setdestination /Volumes/
#sudo tmutil enable
#tmutil startbackup

sudo tmutil enable # Turn on Time Machine.

#echo 'Siri'

echo 'UX, Aqua (GUI), SUI & VUI (NSGlobalDomain, com.apple.systempreferences, com.apple.CrashReporter, com.apple.helpviewer, com.apple.systemuiserver)'

defaults write -g NSDocumentSaveNewDocumentsToCloud -bool FALSE # Do not save to iCloud by default.

defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool FALSE # Do not reopen windows when logging back in. (Disable resume on restart.) (Disable Reopen windows when logging back in (Resume).)

defaults write -g NSDisableAutomaticTermination -bool TRUE # Disable automatic termination of inactive applications.

#defaults write com.apple.CrashReporter DialogType -string "none" # Disable the crash reporter.

defaults write com.apple.helpviewer DevMode -bool TRUE # Set Help viewer in non-floating mode.

/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user # Delete duplicates in Open With menu.

defaults write -g NSWindowResizeTime -float 0.001 # Increase window resizing and fullscreen mode animation speed.

defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.volume" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Volume.menu"
# Display volume menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.user" -bool FALSE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/User.menu"
# Hide fast user switching menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.dwellcontrol" -bool FALSE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/DwellControl.menu"
# Disable Dwell Control (Universal Access) menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.universalaccess" -bool FALSE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/UniversalAccess.menu"
# Disable Universal Access menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.bluetooth" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Bluetooth.menu"
# Display Bluetooth (Bluetooth & Bluetooth Setup Assistant) menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.airport" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/AirPort.menu"
# Display AirPort (network, or Wi-Fi) menu bar item.
#defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.ppp" -bool TRUE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/PPP.menu"
# Display PPP menu bar item.
#defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.pppoe" -bool TRUE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/PPPoE.menu"
# Display PPPoE menu bar item.
#defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.vpn" -bool TRUE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/VPN.menu"
# Display VPN menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.TimeMachine" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/TimeMachine.menu"
# Display Time Machine menu bar item.
#defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.scriptmenu" -bool TRUE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Script Menu.menu"
# Display Script Menu (AppleScript & Script Editor) menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.clock" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Clock.menu"
defaults write com.apple.menuextra.clock IsAnalog -bool FALSE
# Display clock menu bar item, and display the clock as digital.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.battery" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Battery.menu"
defaults write com.apple.menuextra.battery ShowPercent -bool TRUE
# Display battery menu bar item, and display the battery percentage.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.textinput" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/TextInput.menu"
# Display text input (Keyboard & Touch Bar) menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.airplay" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Displays.menu"
# Display AirPlay ('Displays' & Display Server) menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.iChat" -bool FALSE
#defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/iChat.menu"
# Disable iChat menu bar item.
defaults write com.apple.Siri StatusMenuVisible -bool FALSE
defaults write com.apple.systemuiserver "NSStatusItem Visible Siri" -bool FALSE
# Disable Siri menu bar item.
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.eject" -bool TRUE
defaults write com.apple.systemuiserver menuExtras -array-add "/System/Library/CoreServices/Menu Extras/Eject.menu"
# Display eject (Menu Bar & Touch Bar (UX, Aqua (GUI), SUI & VUI)) menu bar item.

defaults write -g NSTextShowsControlCharacters -bool TRUE # Display ASCII control characters using caret notation in plain text view.

defaults write -g AppleICUForce12HourTime -bool FALSE # Set 24-hour time format. (Enable System Preferences: Date & Time: Clock: Time Options: Use a 24-hour clock.)

#defaults write -g NSScrollAnimationEnabled -bool FALSE # Disable smooth scrolling. (i) A trick for old Mac that mess up the animation.

defaults write -g AppleShowScrollBars -string "Automatic" # Display scroll bars automatically. # Other values are WhenScrolling and Always.

sudo defaults write com.apple.universalaccess reduceTransparency -bool FALSE # Set translucent menu bar (Enable Translucent Menu Bar.)

#defaults write -g AppleHighlightColor -string "1.000000 0.937255 0.690196" # Set Highlight color to the yellow of OS X 10.10 Yosemite.

#sudo defaults write -g _HIEnableThemeSwitchHotKey -bool TRUE # Enable Control-Option-Command-T theme switch hotkey. (i) introduced in OS X 10.10 Yosemite.
defaults write -g AppleInterfaceStyleSwitchesAutomatically -int 1 # Automatically adjust the appearance from light to dark during the day. https://support.apple.com/en-gb/guide/mac-help/mchl52e1c2d2/mac (i) introduced in macOS 11 Big Sur.

sudo nvram SystemAudioVolume=" " # Disable the startup sound. # Enter `sudo nvram -d SystemAudioVolume` to reenable the startup sound.

echo 'Image Capture (com.apple.imagecapture)'

defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool TRUE # When you connect new cameras, do nothing.

echo 'Finder & AirDrop (NSGlobalDomain, com.apple.desktopservices, com.apple.finder, com.apple.frameworks.diskimages, com.apple.NetworkBrowser)'

defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE # Disable .DS_Store file writing on network volumes.

defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool TRUE # Enable AirDrop with Ethernet and on unsupported Mac running Mac OS X Lion. (i) introduced in Mac OS X 10.7 Lion.

defaults write com.apple.finder QuitMenuItem -bool TRUE # Enable Quit Finder  ‚åòQ.

#defaults write com.apple.finder WarnOnEmptyTrash -bool FALSE # Disable the trash emptying warning.

defaults write com.apple.frameworks.diskimages skip-verify -bool TRUE
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool TRUE
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool TRUE
# Disable disk images verification.

defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool TRUE
defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool TRUE
defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool TRUE
# Autoopen a new Finder window when a new volume is mounted.

defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"
# Set home as new windows directory. # Use "PfDe" and "file://${HOME}/Desktop" for desktop or "PfLo" and "file:///path" for other paths.

defaults write -g com.apple.springing.enabled -bool TRUE # Enable spring loading for directories.
defaults write -g com.apple.springing.delay -float 0 # Set spring loading delay to null.

defaults write com.apple.finder FXDefaultSearchScope -string "SCcf" # Set Finder search to search the current folder.

defaults write com.apple.finder FXArrangeGroupViewBy -string Kind # Sort files by kind.

defaults write com.apple.finder ShowStatusBar -bool TRUE # Display status bar.

defaults write com.apple.finder ShowPathbar -bool TRUE # Display path bar.

defaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE # Display full POSIX path as window title.

defaults write com.apple.finder FXInfoPanesExpanded -dict \
                                                          General -bool TRUE \
                                                          OpenWith -bool TRUE \
                                                          Privileges -bool TRUE
# Expand General, Open With and Sharing & Permissions file info panes by default.

defaults write -g NSNavPanelExpandedStateForSaveMode -bool TRUE
defaults write -g PMPrintingExpandedStateForPrint -bool TRUE
defaults write -g PMPrintingExpandedStateForPrint2 -bool TRUE
# Expand the save pane by default.

rm -rf ${HOME}/Library/Application\ Support/Dock/desktoppicture.db && killall Dock
#sqlite3 ${HOME}/Library/Application\ Support/Dock/desktoppicture.db 
#sqlite3 ${HOME}/Library/Application\ Support/Dock/desktoppicture.db 
# Set the wallpaper.

defaults write com.apple.finder FXPreferredViewStyle -string "clmv" # Set the default view to the columns one. (i) Other viewing modes are icnv for icons, Nlsv for newlines and Flwv for Cover flow.

/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo TRUE" ${HOME}/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:showItemInfo TRUE" ${HOME}/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo TRUE" ${HOME}/Library/Preferences/com.apple.finder.plist
# Show item info near icons on the desktop and in other icon views.

/usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom FALSE" ${HOME}/Library/Preferences/com.apple.finder.plist # Display desktop items infos to their icons' right.

defaults write com.apple.finder ShowHardDrivesOnDesktop -bool TRUE # Display internal drives on the desktop. (Enable Hard Disks.)

defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool TRUE # Display external drives on the desktop. (Enable External Disks.)

defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool TRUE # Display removable media (CD, DVD and iPod) on the desktop. (Enable CD, DVD and iPod.)

defaults write com.apple.finder ShowMountedServersOnDesktop -bool TRUE # Display mounted servers on the desktop. (Enable Connected Servers.)

defaults write -g AppleShowAllExtensions -bool TRUE # Show all filename extensions. (Enable Show All Filename Extensions.)

defaults write com.apple.finder AppleShowAllFiles -bool TRUE # Display hidden files.

defaults write com.apple.finder DisableAllAnimations -bool TRUE # Disable Finder window & Get Info pane animations.

echo 'Spotlight (com.apple.Spotlight)'

defaults write com.apple.Spotlight orderedItems -array \
                                                       '{"enabled" = 1;"name" = "APPLICATIONS";}' \
                                                       '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}' \
                                                       '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
                                                       '{"enabled" = 1;"name" = "MENU_EXPRESSION";}' \
                                                       '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
                                                       '{"enabled" = 0;"name" = "SYSTEM_PREFS";}' \
                                                       '{"enabled" = 0;"name" = "DOCUMENTS";}' \
                                                       '{"enabled" = 0;"name" = "DIRECTORIES";}' \
                                                       '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
                                                       '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
                                                       '{"enabled" = 0;"name" = "PDF";}' \
                                                       '{"enabled" = 0;"name" = "MESSAGES";}' \
                                                       '{"enabled" = 1;"name" = "CONTACT";}' \
                                                       '{"enabled" = 0;"name" = "EVENT_TODO";}' \
                                                       '{"enabled" = 0;"name" = "IMAGES";}' \
                                                       '{"enabled" = 0;"name" = "BOOKMARKS";}' \
                                                       '{"enabled" = 0;"name" = "MUSIC";}' \
                                                       '{"enabled" = 0;"name" = "MOVIES";}' \
                                                       '{"enabled" = 0;"name" = "FONTS";}' \
                                                       '{"enabled" = 0;"name" = "MENU_OTHER";}' \
                                                       '{"enabled" = 0;"name" = "SOURCE";}' \
                                                       '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}'
# Change indexing order, and set search results. /!\ sends search queries to Apple: MENU_SPOTLIGHT_SUGGESTIONS & MENU_WEBSEARCH. (i) introduced in OS X 10.10 Yosemite: MENU_SPOTLIGHT_SUGGESTIONS, MENU_CONVERSION, MENU_EXPRESSION, MENU_DEFINITION, MENU_OTHER & MENU_WEBSEARCH. # I haven't been able to find this setting anywhere. `plutil -p ${HOME}/Library/Preferences/com.apple.Spotlight.plist > 0;  > 1; diff 0 1;` doesn't give anything. `defaults read ${HOME}/Library/Preferences/com.apple.Spotlight orderedItems | grep -B1 "MENU_WEBSEARCH" | awk '/enabled/{print $NF}' | sed 's/;$//';` neither.
killall mds > /dev/null 2>&1 # Load new settings before rebuilding the index.
sudo mdutil -i on / > /dev/null # Ensure indexing is enabled for the main volume.
sudo mdutil -E / > /dev/null # Rebuild index from scratch.

#sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes" # Disable Spotlight indexing for never indexed mounted volumes.

#plutil -convert binary1 ${HOME}/.files/Library/Application\ Support/com.apple.spotlight.Shortcuts.plist -o ${HOME}/Library/Application\ Support/com.apple.spotlight.Shortcuts # Set Top Hits.

#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search # Disable Spotlight menu bar icon.

echo "'Screenshooter' (com.apple.screencapture)"

defaults write com.apple.screencapture type -string 'png' # Set the screenshot format to PNG. # Other options are bmp for Windows Bitmap, gif for GIF, jpg for JPEG, jp2 for JPEG2000, tif for TIFF, pict for Macintosh PICT and tga for TARGA.

defaults write com.apple.screencapture name -string 'Screenshot' # Set screenshot filename to 'Screenshot ${YYYY}-${MM}-${DD} at ${h}.${mn}.${s}.${ext}'. # default option: 'Screen Shot'; custom options: '', and '\b' lead to a whitespace at the beginning of the filename that the latter cannot erase.

#defaults write com.apple.screencapture include-date -bool FALSE # Disable date in screenshot filename.

#defaults write com.apple.screencapture location -string "${HOME}/Desktop" # Set screenshot writing location to Desktop/.

#defaults write com.apple.screencapture disable-shadow -bool TRUE # Disable shadows in screenshots.

echo 'QuickLook (com.apple.finder)'

#echo -n "0x08000100:0x0" > ${HOME}/.CFUserTextEncoding # Fix the UTF-8 bug of QuickLook. /!\ causes issues with Adobe Illustrator CS5.

defaults write com.apple.finder QLEnableTextSelection -bool TRUE # Enable text selection in QuickLook.

echo 'Dock (com.apple.dock)'

#defaults write com.apple.dock single-app -bool FALSE # Disable Single app mode.

defaults write com.apple.dock minimize-to-application -bool TRUE # Enable window's title bar double-clicking to minimize.

defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool TRUE # Enable spring loading for all items.

defaults write com.apple.dock scroll-to-open -bool TRUE # Enable scroll gestures.

defaults write com.apple.dock mouse-over-hilite-stack -bool TRUE # Enable highlight when hovering for the grid view of a stack.

defaults write com.apple.dock show-process-indicators -bool TRUE # Display indicator lights for open applications.

defaults write com.apple.dock showhidden -bool TRUE # Enable translucent items for hidden apps.

defaults write com.apple.dock pinning -string start # Set position to the left or top.

defaults write com.apple.dock orientation left # Set alignment to the left or top.

defaults write com.apple.dock persistent-apps -array
defaults write com.apple.dock persistent-others -array
# Delete Dock items.

defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Firefox.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Firefox app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/iTerm.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create an iTerm2 app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/VMware Fusion.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a WMware Fusion app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Server.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Server app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Utilities/Activity Monitor.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create an Activity Monitor app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Stickies.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Stickies app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/TextEdit.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a TextEdit app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/LibreOffice.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a LibreOffice app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/GIMP-2.10.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a GIMP app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Sketch.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Sketch app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Inkscape.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create an Inscape app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Preview.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Preview app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/VLC.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a VLC Media Player app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Calendar.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Calendar app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Contacts.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Contacts app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/ProtonMail Bridge.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a ProtonMail Bridge app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Mail.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Mail app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Signal.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Signal app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
#defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Utilities/Script Editor.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Script Editor app item. # found by running `find /{,System/,/Users/${USER}/}Applications -mindepth 1 -maxdepth 2 -type d -iname Script\ Editor.app`.
#defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Xcode.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Xcode app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Jumpcut.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Jumpcut app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/SizeUp.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a SizeUp app item.
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Dropbox.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' # Create a Dropbox app item.
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create a spacer item.
defaults write com.apple.dock persistent-others -array-add '{ "tile-data" = { "list-type" = 1; }; "tile-type" = "recents-tile"; }' # Create a recent items stack others item.
defaults write com.apple.dock persistent-others -array-add '<dict><key>tile-data</key><dict><key>arrangement</key><integer>1</integer><key>displayas</key><integer>1</integer><key>file-data</key><dict><key>_CFURLString</key><string>file:///Applications/</string><key>_CFURLStringType</key><integer>15</integer></dict><key>file-label</key><string>Applications</string><key>file-type</key><integer>2</integer><key>preferreditemsize</key><integer>-1</integer><key>showas</key><integer>2</integer></dict><key>tile-type</key><string>directory-tile</string></dict>' # Create an Applications others item.
defaults write com.apple.dock persistent-others -array-add '<dict><key>tile-data</key><dict><key>arrangement</key><integer>2</integer><key>displayas</key><integer>1</integer><key>file-data</key><dict><key>_CFURLString</key><string>file:///Users/kvpb/Downloads/</string><key>_CFURLStringType</key><integer>15</integer></dict><key>file-label</key><string>Downloads</string><key>file-type</key><integer>2</integer><key>preferreditemsize</key><integer>-1</integer><key>showas</key><integer>2</integer></dict><key>tile-type</key><string>directory-tile</string></dict>' # Create a Downloads others item.
defaults write com.apple.dock persistent-others -array-add '<dict><key>tile-data</key><dict><key>arrangement</key><integer>5</integer><key>displayas</key><integer>1</integer><key>file-data</key><dict><key>_CFURLString</key><string>file:///Users/kvpb/Dropbox/</string><key>_CFURLStringType</key><integer>15</integer></dict><key>file-label</key><string>Dropbox</string><key>file-type</key><integer>2</integer><key>preferreditemsize</key><integer>-1</integer><key>showas</key><integer>2</integer></dict><key>tile-type</key><string>directory-tile</string></dict>' # Create a Dropbox others item.
defaults delete com.apple.dock mod-count
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create an app item area spacer item.
defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}' # Create an other items area spacer item.

defaults write com.apple.dock mineffect -string "scale" # Set window minimaximazation effect to scale. # Do not set to hidden 'suck' which, y'know, sucks.

defaults write com.apple.dock hide-mirror -bool TRUE # Disable mirror effect.

defaults write com.apple.dock no-glass -bool YES # Disable glass effect.

defaults write com.apple.dock launchanim -bool FALSE # Disable opening applications animation.

defaults write com.apple.dock autohide -bool TRUE # Enable autohiding.
defaults write com.apple.dock autohide-delay -float 0
defaults write com.apple.dock autohide-time-modifier -float 0
# Speed autohiding animation up.

echo 'Mission Control (com.apple.dock)' # (i) has been substituted for Expos√©.

defaults write com.apple.dock mru-spaces -bool FALSE # Disable automatic spaces rearranging based on most recent use.

#defaults write com.apple.dock expose-group-by-app -bool FALSE # Do not group windows by application. (Set the behavior of Mission Control behavior to that of Expos√©.) (Disable Group Windows By Application.)

defaults write com.apple.dock expose-animation-duration -float 0.1 # Speed animations up.

echo 'Dashboard (com.apple.dock, com.apple.dashboard)'

defaults write com.apple.dock dashboard-in-overlay -bool TRUE # Hide dashboard as a space.

defaults write com.apple.dashboard mcx-disabled -bool TRUE # Disable the dashboard.

#defaults write com.apple.dashboard devmode -bool TRUE # Enable dashboard dev mode. (i) allows to keep widgets on the desktop.

echo 'Launchpad (com.apple.dock)'

defaults write com.apple.dock ResetLaunchPad -bool TRUE # Reset Launchpad organization to defaults.

sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app" "/Applications/iOS Simulator.app" # Add iOS simulator to Launchpad.

defaults write com.apple.dock showLaunchpadGestureEnabled -int 0 # Disable the pinch-with-thumb-and-three-fingers trackpad gesture. (Launchpad: Trackpad -> System preferences: TrackPad: More gestures.)

#echo 'Notification Center'
#
#launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null # Disable the notification center, and remove its menu bar item. (i) 'fixed' by Apple on macOS 10.13 High Sierra. # But hey, 'It's not a bug; it's a feature'.

echo 'Software Update & App Store (com.apple.SoftwareUpdate, com.apple.commerce, com.apple.appstore)'

defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool TRUE # Enable the automatic update check.

defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1 # Set software updates check frequency to daily.

defaults write com.apple.SoftwareUpdate AutomaticDownload -int 0 # Disable available updates background automatic download.

defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 0 # Disable system data files and security updates automatic installation.

defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 0 # Disable automatic download of apps purchased on other Apple computers.

defaults write com.apple.commerce AutoUpdate -bool FALSE # Disable app autoupdate.

defaults write com.apple.commerce AutoUpdateRestartRequired -bool TRUE # Block the App store to reboot the machine on OS X updates.

defaults write com.apple.appstore ShowDebugMenu -bool TRUE # Enable the App store's debug menu.
defaults write com.apple.appstore WebKitDeveloperExtras -bool TRUE # Enable the App store's WebKit dev tools.

#echo 'Xcode'

#xcode-select --install
#xcodebuild -license accept
# Install Xcode and accept the Xcode EULA.

echo 'Terminal & X11 (com.apple.terminal, org.x.X11, com.apple.x11)'

defaults write com.apple.terminal StringEncodings -array 4 # Set Terminal encoding to UTF-8.

defaults write com.apple.terminal ApplePressAndHoldEnabled -bool FALSE # Disable Terminal press-and-hold for keys.

defaults write com.apple.terminal SecureKeyboardEntry -bool TRUE # Enable Terminal secure keyboard entry.

defaults write com.apple.terminal FocusFollowsMouse -bool TRUE
defaults write com.apple.x11 wm_ffm -bool TRUE # Enter `defaults write org.x.X11 wm_ffm -bool TRUE` for Mac OS X Snow Leopard.
# Enable focus follows mouse (point-to-focus) for Terminal and X11 apps.

defaults write com.apple.terminal StartAtLogin -bool TRUE # Launch Terminal at startup.

echo 'TextEdit (com.apple.TextEdit, com.apple.LaunchServices)'

#defaults write com.apple.TextEdit NSUserKeyEquivalents \
#'{\
#	"\033Edit\033Transformations\033Capitalize" = "@~$u";\
#	"\033Edit\033Transformations\033Make Lower Case" = "@$l";\
#	"\033Edit\033Transformations\033Make Upper Case" = "@$u";\
#	"\033Format\033Font\033Baseline\033Subscript" = "@~$-";\
#	"\033Format\033Font\033Baseline\033Superscript" = "@$6";\
#	Justify = "@~$[";\
#}';
# Add TextEdit keyboard app shortcuts:
# 	-  Alt-Shift-U 'Capitalize'
# 	-  Shift-L 'Make Lower Case'
# 	-  Shift-U 'Make Upper Case'
# 	-  Shift-Command-6 (Command-^ on US Mac keyboard layout) 'Superscript'
# 	-  Shift-Command-- (Command-_ on US Mac keyboard layout) 'Subscript'
# 	-  Alt-Shift-Command-[ (Option-Command-{ on US Mac keyboard layout) 'Justify'

defaults write com.apple.TextEdit ShowRuler -bool FALSE # Show ruler.
defaults write com.apple.TextEdit SmartCopyPaste -bool FALSE # Disable smart copypaste.
defaults write com.apple.TextEdit SmartQuotes -bool FALSE # Disable smart quotes.
defaults write com.apple.TextEdit SmartDashes -bool FALSE # Disable smart dashes.
defaults write com.apple.TextEdit SmartLinks -bool FALSE # Disable smart links.
defaults write com.apple.TextEdit TextReplacement -bool FALSE # Disable text replacement.
defaults write com.apple.TextEdit CorrectSpellingAutomatically -bool FALSE # Disable Correct spelling automatically.
defaults write com.apple.TextEdit CheckSpellingWhileTyping -bool FALSE # Do not check spelling as you type.
defaults write com.apple.TextEdit CheckGrammarWithSpelling -bool FALSE # Do not check grammar with spelling.
defaults write com.apple.TextEdit DataDetectors -bool FALSE # Disable data detectors.

defaults write com.apple.TextEdit PlainTextEncoding -int 4 # Set UTF-8 as plain text file opening encoding. (Set TextEdit: Preferences: Open and save: Plain text encoding: Opening files to Unicode (UTF-8).)
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4 # Set UTF-8 as plain text file saving encoding. (Set TextEdit: Preferences: Open and save: Plain text encoding: Saving files to Unicode (UTF-8).)

defaults write com.apple.TextEdit NSFixedPitchFont -string "Menlo-Regular"
defaults write com.apple.TextEdit NSFixedPitchFontSize -int "10"
# Set Apple Menlo 10pt as plain text font. (i) Apple Menlo 10pt is the default fixed-width font of OS X.
defaults write com.apple.TextEdit NSFont -string "TimesNewRomanPSMT"
defaults write com.apple.TextEdit NSFontSize -int "12"
# Set rich text font to Monotype Times New Roman 12pt.

defaults write com.apple.TextEdit RichText -int 0 # Set plain text as new document text format.
defaults write com.apple.TextEdit ShowPageBreaks -bool TRUE # Do not wrap to page.
defaults write com.apple.TextEdit WidthInChars -int 80 # Set new document window width to 80 characters (or columns).
defaults write com.apple.TextEdit HeightInChars -int 24 # Set new document window height to 24 characters (or lines).
defaults write com.apple.TextEdit TabWidth -int 4 # Set tab width to 4 chars.
defaults write com.apple.TextEdit AddExtensionToNewPlainTextFiles -bool FALSE # Do not add .txt extension plain text files at save. (Disable Add '.txt' extension to plain text files.)

defaults write com.apple.TextEdit author -string "Karl V. P. Bertin" # Set new document author name to KVPB's.
defaults write com.apple.TextEdit company -string "" # Set new document company name.
defaults write com.apple.TextEdit copyright -string "" # Set new document copyright.

defaults write com.apple.TextEdit IgnoreHTML -bool TRUE # Display HTML files as code. (Enable Display HTML files as HTML code instead of formatted text.)
defaults write com.apple.TextEdit IgnoreRichText -bool FALSE # Display RTF files as formatted text. (Disable Display RTF files as RTF code instead of formatted text.)

defaults write com.apple.TextEdit HTMLEncoding -int 20 # Set UTF-8 as HTML file encoding. (Set TextEdit: Preferences: Open And Save: HTML Saving Options: Encoding to Unicode (UTF-8).)
defaults write com.apple.TextEdit UseXHTMLDocType -bool FALSE
defaults write com.apple.TextEdit UseTransitionalDocType -bool TRUE
# Set new HTML document type to HTML 4.01 transitional. # Both are crossed attributes, e.g. enter `UseXHTMLDocType -bool FALSE` and `UseTransitionalDocType -bool FALSE` to set document type to HTML 4.01 strict.
defaults write com.apple.TextEdit UseEmbeddedCSS -bool FALSE
defaults write com.apple.TextEdit UseInlineCSS -bool FALSE
# Set new HTML document styling to embedded CSS. # Both are crossed attributes, e.g. enter `UseEmbeddedCSS -bool FALSE` and `UseInlineCSS -bool FALSE` to set styling to no CSS.

defaults write com.apple.TextEdit PreserveWhitespace -bool TRUE # Preserve white space.

#defaults write com.apple.LaunchServices LSHandlers -array-add '{LSHandlerContentType=org.openxmlformats.wordprocessingml.document;LSHandlerRoleAll=com.apple.textedit;}'
# Set TextEdit as default Office Open XML Document editor.

echo 'Disk Utility (com.apple.DiskUtility)'

defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool TRUE
defaults write com.apple.DiskUtility advanced-image-options -bool TRUE
# Enable the debug menu.

echo 'Activity Monitor (com.apple.ActivityMonitor)'

defaults write com.apple.ActivityMonitor OpenMainWindow -bool TRUE # Display the main window when launching.

defaults write com.apple.ActivityMonitor ShowCategory -int 0 # Display all processes.

defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
defaults write com.apple.ActivityMonitor SortDirection -int 0
# Display results sorted by CPU usage.

defaults write com.apple.ActivityMonitor IconType -int 5 # Display CPU usage icon in the Dock.

echo 'Safari & WebKit (com.apple.Safari)' # This section has been the first example of how I want such scripts to configure OS: in case of emergency on a clean install, what is needed the most is set first.

defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool TRUE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool TRUE
# Bind Tab to highlight webpage items. (Enable Press Tab to highlight each item on a webpage.)
defaults write com.apple.Safari CommandClickMakesTabs -int 1 # Bind command-right click to open links in new tabs. (Enable ‚åò-click opens a link in a new tab.)

defaults write com.apple.Safari WebKitDefaultTextEncodingName -string "utf-8" # Set UTF-8 as default encoding. (Set Default Encoding to Unicode (UTF-8).)
defaults write com.apple.Safari HistoryAgeInDaysLimit -int 2147483647 # Remove history items after Int32. ('Disable' history automatic removal.) (Set Remove History Items to After Int32.)
defaults write com.apple.Safari LocalFileRestrictionsEnabled -bool TRUE # Disable local files access. (Disable Disable Local File Restrictions.)
defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool TRUE # Warn when visiting a fraudulent website.

defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool TRUE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool TRUE
# Enable the web inspector.

defaults write com.apple.Safari WebKitMinimumFontSize -int 0
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2MinimumFontSize -int 0
# Never use font sizes smaller than 9. (Enable Never use font sizes smaller than N.) (Set Never use font sizes smaller than to 9.)
defaults write com.apple.Safari UserStyleSheetEnabled -int 0 # Set Style sheet to None selected.

defaults write com.apple.Safari DownloadsPath -string "${HOME}/Downloads" # Set ${HOME}/Downloads/ as downloads storage path. (Set Save Downloaded Files to To Downloads/.)
defaults write com.apple.Safari AutoOpenSafeDownloads -bool FALSE # Do not open 'safe' files after downloading. (Disable Open ‚ÄúSafe‚Äù Files After Downloading.)

defaults write com.apple.Safari HomePage -string "https://www.perdu.com" # Set homepage URL to about:blank.
defaults write com.apple.Safari NewWindowBehavior -int 0 # New windows open with homepage. (Set New windows open with to Homepage.)
defaults write com.apple.Safari NewTabBehavior -int 0 # New tabs open with homepage. (Set New tabs open with to Homepage.)

defaults write com.apple.Safari AlwaysRestoreSessionAtLaunch -bool TRUE # Safari opens with all windows from last session. (Enable Safari sessions restoration at launch.) (Set Safari opens with to All windows from last session.)
defaults write com.apple.Safari OpenNewTabsInFront -bool FALSE # Do not make a new tab or window active when it opens. (Disable new tabs automatic activation.) # 'Activation' is when a window is brought to foreground.
defaults write com.apple.Safari TabCreationPolicy -int 1 # Automatically open pages in tabs instead of windows. (Set pages to automatically open in tabs instead of windows.) (Set Open pages in tabs instead of windows to Automatically.)

defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool FALSE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool FALSE
# Block popup windows.

defaults write com.apple.Safari WebKitStorageBlockingPolicy -int 1
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy -int 1
# Block cookies and other website data from third parties and advertisers. (Set Block cookies and other website data to From third parties and advertisers.)
defaults write com.apple.Safari WebKitPreferences.applePayCapabilityDisclosureAllowed -bool FALSE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2ApplePayEnabled -bool FALSE
# Deny websites to check whether Apple Pay is set up.

defaults write com.apple.Safari SafariGeolocationPermissionPolicy -int 0 # Deny without prompting website use of location services. ('Disable' location services access.) (Set Limit website access to location services to Deny without prompting.)
defaults write com.apple.Safari SuppressSearchSuggestions -bool TRUE # Prevent search engine from providing suggestions. (Block search engines suggestions providing.) (Enable Prevent search engine from providing suggestions.)
defaults write com.apple.Safari PreloadTopHit -bool FALSE # Do not preload Top hit in the background. (Disable top hit preloading.) (Enable Do not preload Top hit in the background.)
defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool TRUE # Ask websites not to track me. (Enable Do not track.) (Enable Ask websites not to track me.)

defaults write com.apple.Safari WebKitPreferences.invisibleMediaAutoplayNotPermitted -bool TRUE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2InvisibleAutoplayNotPermitted -bool TRUE
# Disable media autoplay.
defaults write com.apple.Safari WebKitPreferences.allowsPictureInPictureMediaPlayback -bool FALSE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsPictureInPictureMediaPlayback -bool FALSE
# Disable PIP media playback.
# For fuck's sake. I can't even believe that kind of crap was ever implemented in the first place. Who in the world's the shitmop who came out with these fabulous ideas?

	user=`ls -l /dev/console | cut -d " " -f 4`

	database="/Users/${user}/Library/Safari/PerSitePreferences.db"

	sudo -u ${user} sqlite3 ${database} "INSERT INTO default_preferences ( preference, default_value ) values ( 'PerSitePreferencesAutoplay','1');" 2> /dev/null
	sudo -u ${user} sqlite3 ${database} "INSERT INTO default_preferences ( preference, default_value ) values ( 'PerSitePreferencesMicrophone','1');" 2> /dev/null
	sudo -u ${user} sqlite3 ${database} "INSERT INTO default_preferences ( preference, default_value ) values ( 'PerSitePreferencesCamera','1');" 2> /dev/null
	# Set all to Deny.

	currentsettings=`sqlite3 ${database} 'select * from default_preferences;' 2> /dev/null`
	for line in $currentsettings; do
		if [[ $line != *"|1" ]]; then
			line=`echo "$line" | awk -F "|" '{print $2}'`
			sudo -u ${user} sqlite3 ${database} "update default_preferences set default_value = '1' where preference = '$line';"
			sqlite3 $database 'select * from default_preferences;' | grep ${line}
		fi; # If the current setting is not 1 (Deny), then set to Deny.
	done;
	# Find current entries in the database which are not set to Deny, and set them to Deny as needed.
	propertylist="/Users/${user}/Library/Safari/UserMediaPermissions.plist" # (i) The UserMediaPermissions.plist file contains any permission for remote websites to interact with the camera, microphone, location services etc that deviate from the default Deny permission.
	if [ -e $propertylist ]; then rm -f ${propertylist}; fi; # Delete the UserMediaPermissions.plist file to deny websites to access the camera, microphone, location etc.
	# Set per-site preferences to deny Mopshit-Man & Wasteyard Woman to access everything by default.

	sudo -u ${user} defaults write com.apple.Safari CanPromptForPushNotifications -bool FALSE # (i) The preferences file could just be deleted. However, should the user view the settings, this provides indication to them that it is not wanted to receive push notifications.
	propertylist="/Users/${user}/Library/Safari/RemoteNotifications/Permissions.plist" # (i) The location of the Safari Notifications Preferences file.
	# Deny permission to show alerts in Notification Center to any-and-all websites.
	notifications=`/usr/libexec/PlistBuddy -c "Print" "${propertylist}" | grep "= Dict" | awk -F = '{print $1}' | perl -pe "s/\s*//"| perl -pe "s/ \$//"`
	for i in $notifications; do
		enabled=`/usr/libexec/PlistBuddy -c "Print ${i}:Remote\ Notifications\ Allowed" "${propertylist}"`
		if [ $enabled != 'false' ]; then
			sudo -u ${user} /usr/libexec/PlistBuddy -c "Set ${i}:Remote\ Notifications\ Allowed false" "${propertylist}"
		fi;
	done;
	propertylist="/Users/${user}/Library/Safari/UserNotificationPermissions.plist"
	notifications=`/usr/libexec/PlistBuddy -c "Print" "${propertylist}" | grep "= Dict" | awk -F = '{print $1}' | perl -pe "s/\s*//"| perl -pe "s/ \$//"`
	for i in $notifications; do
		a=`echo "$i"| perl -pe "s/\:/\\\\\:/"` # escaping ':' so PlistBuddy interprets it correctly
		enabled=`/usr/libexec/PlistBuddy -c "Print ${a}:Permission" "${propertylist}"`
		if [ $enabled != '0' ]; then
			sudo -u ${user} /usr/libexec/PlistBuddy -c "Set ${a}:Permission 0" "${propertylist}"
		fi;
	done;
	# Disable per-site push notifications.
# Script by `MrP` on 2017.05.12 at 22:12:00 https://web.archive.org/web/20190504131334/https://www.jamf.com/jamf-nation/discussions/26028/programatic-configuration-of-safari-11-websites-preferences-tab#responseChild157039

defaults write com.apple.Safari CanPromptForPushNotifications -bool FALSE # Do not allow websites to ask for permission to send push notifications. ('Disable' push notifications for websites.) (Disable Allow websites to ask for permission to send push notifications.)

defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PlugInSnapshottingEnabled -bool FALSE # Stop plug-ins to save power. (Enable Stop plugins to save power.)
defaults write com.apple.Safari WebKitPluginsEnabled -bool FALSE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool FALSE
# Disable plugins.

defaults write com.apple.Safari WebKitJavaEnabled -bool FALSE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool FALSE
# Disable Java.

defaults write com.apple.Safari WebKitJavaScriptEnabled -bool TRUE
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled -bool TRUE
# Enable JavaScript.

defaults write com.apple.Safari ExtensionsEnabled -bool FALSE # Enable Safari extensions. (Enable Extensions.)
defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool TRUE # Install updates automatically. (Enable automatic extensions updates.) (Enable Install updates automatically.)

defaults write com.apple.Safari AutoFillPasswords -bool FALSE # Do not AutoFill using names and passwords. (Disable AutoFill user names and passwords.)
defaults write com.apple.Safari AutoFillCreditCardData -bool FALSE # Do not AutoFill credit cards. (Disable Credit cards.)
defaults write com.apple.Safari AutoFillFromAddressBook -bool FALSE # Do not AutoFill using info from my Contacts card. (Disable Using info from my Contacts card.)
defaults write com.apple.Safari AutoFillMiscellaneousForms -bool FALSE # Do not AutoFill other forms. (Disable Other forms.)
# Do not AutoFill web forms. (Disable AutoFill.)

defaults write com.apple.Safari DefaultPageZoom -float 1.000000 # Set the default page zoom level to 100%.

defaults write com.apple.Safari IncludeDevelopMenu -bool TRUE # Show Develop menu in menu bar. (Display develop menu in the menu bar.) (Enable Show Develop menu in menu bar.)
defaults write com.apple.Safari ShowStatusBar -bool TRUE # Show status bar  ‚åò/. (Display the status bar.) (Enable Show status bar  ‚åò/.)

defaults write com.apple.Safari BookmarksMenuIncludesRendezvous -bool FALSE # Disable bookmarks Bonjour menu.
defaults write com.apple.Safari ProxiesInBookmarksBar "()" # Clear favorite bookmarks bar. (Remove Reading list and Top sites from the bookmarks bar.)
defaults write com.apple.Safari ShowFavoritesBar -bool FALSE # Hide favorite bookmarks bar. (Hide Favorites bar  ‚áß‚åòB.)

defaults write com.apple.Safari SidebarViewModeIdentifier -string "Bookmarks" # Display bookmarks sidebar.
defaults write com.apple.Safari ShowSidebarInNewWindows -bool FALSE # Hide sidebar in new windows.

defaults write com.apple.Safari TopSitesGridArrangement -int 0 # Top Sites shows 6 sites. (Display as few top sites as possible.) (Set Top sites shows to 6 sites.)

echo 'Mail (com.apple.mail)'

defaults write com.apple.mail DisableInlineAttachmentViewing -bool TRUE # Disable inline attachments. (Only show the icons.)

defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool FALSE # Copy email addresses as ${firstname}.${lastname}@${domain}.${sx} instead of '${Firstname} ${Lastname} <${firstname}.${lastname}@${domain}.${sx}>'. (i) Disable Use smart addresses.

defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "YES"
defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortedAscending" -string "YES"
defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"
# Show most recent message at the top. (Display emails in threaded mode, and sort them as newest at the top.) (Enable Show most recent message at the top.)

defaults write com.apple.mail SpellCheckingBehavior -string "NoSpellCheckingEnabled" # Never check spelling. (Set Check Spelling to Never.) (Disable automatic spell checking.)

echo 'Calendar (com.apple.iCal)' # (i) was formerly iCal.

defaults write com.apple.iCal "scroll by weeks in week view" -int 2 # Scroll in week view by week, stop on today. (Set Scroll in week view by to Week, stop on today.)

defaults write com.apple.iCal "first day of week" -int 1 # Set week start to monday.

defaults write com.apple.iCal "Show Week Numbers" -bool TRUE # Display week numbers. (i) introduced in OS X 10.8 Mountain Lion.

defaults write com.apple.iCal "Show time in Month View" -bool TRUE # Display events time in month view.

defaults write com.apple.iCal "n days of week" -int 7 # Display 7 days.

#echo 'Contacts (com.apple.addressbook)' # (i) formerly named Address Book.

#echo 'iChat'

echo 'Messages (com.apple.messageshelper.MessageController)'

defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool FALSE # Disable automatic emoji substitution.
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool FALSE # Disable smart quotes.

defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool FALSE # Disable continuous spell checking.

#echo 'Dictionary (com.apple.Dictionary, com.apple.DictionaryServices)'

cecho 'Second-Party Settings: User-Specific Filesystem Customs' ${lityellow}

#git clone git:github.com/kvpb/.files.git ${HOME}/.files
# Clone my .files/ from my GitHub remote repo to ${HOME}/.

if [ -d "${HOME}/{Miscellaneous,Work}" ]
then
	if [ -L "${HOME}/{Miscellaneous,Work}" ]
	then
		mv ${HOME}/{Miscellaneous,Work} ${HOME}/.Trash/
		open -R ${HOME}/.Trash
		mkdir ${HOME}/{Miscellaneous,Work}
	fi
else
	mkdir -p ${HOME}/{Miscellaneous,Work}
fi
# If Miscellaneous and Work aren't directories in ${HOME}/, substitute symbolic links by or add these directories.
if [ -d "${HOME}/Downloads/{Documents,Pictures,Music,Movies,Miscellaneous}" ]
then
	if [ -L "${HOME}/Downloads/{Documents,Pictures,Music,Movies,Miscellaneous}" ]
	then
		mv ${HOME}/Downloads/{Documents,Pictures,Music,Movies,Miscellaneous} ${HOME}/.Trash/
		open -R ${HOME}/.Trash
		mkdir ${HOME}/Downloads/{Documents,Pictures,Music,Movies,Miscellaneous}
	fi
else
	mkdir -p ${HOME}/Downloads/{Documents,Pictures,Music,Movies,Miscellaneous}
fi
# If Documents, Pictures, Music, Movies and Miscellaneous aren't directories in ${HOME}/Downloads/, substitute symbolic links by or add these directories.
if [ -d "${HOME}/{DCIM,FCIM,Camera}" ]
then
	if [ -L "${HOME}/{DCIM,FCIM,Camera}" ]
	then
		mv ${HOME}/{DCIM,FCIM,Camera} ${HOME}/.Trash/
		open -R ${HOME}/.Trash
		mkdir ${HOME}/{DCIM,FCIM,Camera}
	fi
else
	mkdir -p ${HOME}/{DCIM,FCIM,Camera}
fi
# If DCIM and Camera aren't directories in ${HOME}/, substitute symbolic links by or add these directories.

ln -s ${HOME}/.files/.inputrc ${HOME}/.inputrc
#ln -s ${HOME}/.files/.shrc ${HOME}/.shrc
#ln -s ${HOME}/.files/.shinit ${HOME}/.shinit
#ln -s ${HOME}/.files/.profile ${HOME}/.profile
ln -s ${HOME}/.files/.exports ${HOME}/.exports
ln -s ${HOME}/.files/.functions ${HOME}/.functions
ln -s ${HOME}/.files/.aliases ${HOME}/.aliases
ln -s ${HOME}/.files/.bashrc ${HOME}/.bashrc
ln -s ${HOME}/.files/.bash_login ${HOME}/.bash_login
ln -s ${HOME}/.files/.bash_profile ${HOME}/.bash_profile
ln -s ${HOME}/.files/.bash_logout ${HOME}/.bash_logout
ln -s ${HOME}/.files/.bash_prompt ${HOME}/.bash_prompt
ln -s ${HOME}/.files/.zshrc ${HOME}/.zshrc
ln -s ${HOME}/.files/.zprofile ${HOME}/.zprofile
#ln -s ${HOME}/.files/.ssh ${HOME}/.ssh
ln -s ${HOME}/.files/.vimrc ${HOME}/.vimrc
ln -s ${HOME}/.files/.vim ${HOME}/.vim
ln -s ${HOME}/.files/.gitconfig ${HOME}/.gitconfig
ln -s ${HOME}/.files/.gitignore_global ${HOME}/.gitignore_global
mkdir -p ${HOME}/Library/Scripts && cp -R ${HOME}/.files/Library/Scripts/. ${HOME}/Library/Scripts/ #sudo rmdir ${HOME}/Library/Scripts && ln -s ${HOME}/.files/Library/Scripts ${HOME}/Library/Scripts && chmod -h 700 ${HOME}/Library/Scripts
mkdir -p ${HOME}/Library/Services && cp -R ${HOME}/.files/Library/Services/. ${HOME}/Library/Services/ #sudo rmdir ${HOME}/Library/Services && ln -s ${HOME}/.files/Library/Services ${HOME}/Library/Services && chmod -h 700 ${HOME}/Library/Services
ln -s ${HOME}/Downloads/Miscellaneous ${HOME}/Miscellaneous/Downloads
ln -s ${HOME}/Downloads/Documents ${HOME}/Documents/Downloads
ln -s ${HOME}/Downloads/Pictures ${HOME}/Pictures/Downloads
ln -s ${HOME}/Downloads/Movies ${HOME}/Movies/Downloads
ln -s ${HOME}/Downloads/Music ${HOME}/Music/Downloads
ln -s ${HOME}/DCIM ${HOME}/Pictures/DCIM
ln -s ${HOME}/FCIM ${HOME}/Pictures/FCIM
ln -s ${HOME}/Camera ${HOME}/Pictures/Camera
# Create user-specific custom symbolic links.

> ${HOME}/.hushlogin # Create the .hushlogin file in the current user's home folder. /!\ speeds up terminal emulator opening? https://news.ycombinator.com/item?id=3879833

#chflags nohidden ${HOME}/Library # Show the hidden Library folder. # This script also enables hidden files display which overrides this.

#dscl . delete /Users/kvpb Picture
#sudo dscl . create /Users/kvpb Picture "/Users/${HOME}/Pictures/UserPictures/KVPB.tif"
# Set user picture. https://support.apple.com/kb/PH25797

cecho 'Third-Party: System-Wide & User-Specific Xenogenetic Software & Preferences' ${lityellow}

#echo 'MacPorts'
#
# # Download and install MacPorts.

echo 'iTerm2 (com.googlecode.iterm2)'

#defaults write com.googlecode.iterm2 HideFromDockAndAppSwitcher -int 1 # Hide the app (but not its shortcut) from the Dock and the Application Switcher. (iTerm->Preferences (Command-Comma)->Appearance [tab]->Exclude from Dock and ‚åò-Tab Application Switcher [checkbox])

defaults write com.googlecode.iterm2 PromptOnQuit -bool FALSE # Hide quit prompt.

echo 'Jumpcut (net.sf.Jumpcut)'

defaults write net.sf.Jumpcut SUCheckAtStartup -bool TRUE # Check for updates on launch.

defaults write net.sf.Jumpcut "ShortcutRecorder mainHotkey" -array '{keyCode = 9;modifierFlags = 786432;}' # Set Control-Option-V (‚åÉ‚å•V) as main hotkey.

defaults write net.sf.Jumpcut bezelAlpha -float 0.2501524448394775 # Set bezel transparency to default.

defaults write net.sf.Jumpcut displayNum -int 10 # Display 10 clippings in menu.

defaults write net.sf.Jumpcut lastRun -int 0.6

defaults write net.sf.Jumpcut loadOnStartup -bool TRUE # Load Jumpcut on startup?

defaults write net.sf.Jumpcut menuIcon -int 0 # Set Jumpcut icon as menu item icon.

defaults write net.sf.Jumpcut menuSelectionPastes -bool TRUE # Menu selection pastes. ('Selecting a clipping from the menu causes it to be pasted instead of copied back onto the pasteboard.')

defaults write net.sf.Jumpcut rememberNum -int 99 # Remember 99 clippings. ('Controls how many clippings Jumpcut stores in its stack'.)

defaults write net.sf.Jumpcut savePreference -int 2 # Save after each clip.

defaults write net.sf.Jumpcut stickyBezel -bool FALSE # No sticky bezel. ('The bezel must be manually dismissed using the "escape" of "return" keys.')

defaults write net.sf.Jumpcut wraparoundBezel -bool TRUE # Wraparound bezel. ('In the bezel, moving down from the last item takes you to the top and moving up from the first item takes you to the bottom.')

echo 'SizeUp (com.irradiatedsoftware.SizeUp)'

defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool TRUE # Launch SizeUp at login.

defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool FALSE # Hide the preferences window at launch.

echo 'Firefox (org.mozilla.firefox)'

defaults write com.apple.LaunchServices LSHandlers -array-add \
                                                              '{LSHandlerRoleAll=org.mozilla.firefox;LSHandlerURLScheme=http;}' \
                                                              '{LSHandlerRoleAll=org.mozilla.firefox;LSHandlerURLScheme=https;}' \
                                                              '{LSHandlerContentType=public.html;LSHandlerRoleViewer=org.mozilla.firefox;}' \
                                                              '{LSHandlerContentType=public.url;LSHandlerRoleViewer=org.mozilla.firefox;}'
# Set Firefox as default web browser.

echo 'Transmission (org.m0k.transmission)'

defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool TRUE
defaults write org.m0k.transmission IncompleteDownloadFolder -string "${HOME}/Downloads/Transmission"
# Set incomplete download path to ${HOME}/Downloads/Transmission.

#defaults write org.m0k.transmission DeleteOriginalTorrent -bool TRUE # Move original torrent files to trash.

defaults write org.m0k.transmission DownloadAsk -bool FALSE
defaults write org.m0k.transmission MagnetOpenAsk -bool FALSE
# Disable confirmation prompt before downloading.

defaults write org.m0k.transmission WarningDonate -bool FALSE # Hide the donate message.
defaults write org.m0k.transmission WarningLegal -bool FALSE # Hide the legal disclaimer.

defaults write org.m0k.transmission BlocklistURL -string "http://john.bitsurge.net/public/biglist.p2p.gz" # Enable IP blocking, and set IP blocklist to John Tyree's.
defaults write org.m0k.transmission BlocklistAutoUpdate -bool TRUE # Enable IP blocklist autoupdate.

echo 'VMware Fusion 8 (com.vmware.fusion)'

defaults write com.vmware.fusion showStartMenu3 -int 0 # Hide menu bar icon. (Set VMware Fusion 8: Preferences: General: Applications menu: Show in menu bar to Never.)

for i in 'Activity Monitor' 'Calendar' 'Contacts' 'cfprefsd' 'Disk Utility' 'Dock' 'Finder' 'Mail' 'Messages' 'Safari' 'System Preferences' 'SystemUIServer' 'TextEdit' 'Xcode'
do
	killall "${i}" > /dev/null 2>&1
done
# Kill all affected applications except terminal emulators.

echo ''
cecho 'macOS 11 Big Sur has been configured.' ${litcyan}

cecho 'A restart is required for some of these changes to take effect. Restart...?, \e[4my\e[0mes or \e[4mn\e[0mo?' ${litgreen}
read -r input
if [[ ${input} =~ ^([Yy]|[Yy][Ee][Ss]|[Yy][Ee][Aa][Hh])$ ]]
then
	osascript -e 'tell app "System Events" to restart' # Restart without confirmation.
else
	exit 0
fi

# .macos11
# macOS 11 Big Sur Configuration Script
#
# Karl V. P. B. `kvpb`
# +33 A BB BB BB BB
# local-part@domain
#
# at some point, execute the scripts to install software
# then execute the one to add some software as login items
	# or rather call each script into the software's part
	# and then call the one to add it as a login item
		# or even write a .acos followup script to execute after that one and the reboot which would do these
# `sh ${HOME}/.files/lib/scpt/AddLoginItems.sh iTerm2 Stickies ProtonMail\ Bridge Flux`
# and maybe write RemoveLoginItems.sh to specify it to screw Steam, Spotify and some other bloatware which always adds itself back to the login items list
# eventually, simmutable?
# 
# also, a good thing to do would be to make the script incremental
#   and by that i mean that the script should just check for the version of macos
#       but actually if i'm to do this well let's just write a .acos which takes care of it
#   and then incrementally call parts such as .macos1012, .macos1013 etc up to the current version
# eg if ran on macos 10.15 catalina then it outta call every script from the oldest compatible to the newest one so .macosx100 up to .macos1015
# the problem with this is that some stuff is deprecated by apple over time
#   so i can't do this
# but i can do it another way
# let's say i perfectly finished .osx109 and .osx1010
# well then i can merge 'em all in a single .macos script whose commands
#   when specific to a version or range of versions of macos
# are chosen with an if statement
# and then i can wrap all these in a single .acos
# which determines the platform
# and then executes the right script accordingly
# this way i can include .ios into it
# but first
# let's fully finish .osx109, .osx1010 and .macos
# also as long as i'm not done i must specify 'this command has been introduced in' just to ensure i don't get lost into this later
