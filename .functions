#!/bin/bash

DeleteDSStore ()
{
	find . -name '.DS_Store' -delete -print
} # `DeleteDSStore` '.DS_Store Deletion'
# Find from current directory file named '.DS_Store', remove it, and display the full file name of the standard output followed by a newline.

ResetLaunchPad ()
{
	defaults write com.apple.dock ResetLaunchPad -bool true && killall Dock
} # `ResetLaunchPad` 'LaunchPad Reset'
# Reset LaunchPad layout.

tapearchiveQobuzdownloadedcontent ()
{
	local prefix=$1
	local suffix=$2

	find * -maxdepth 0 -type d -exec tar cvf $PREFIX{}$SUFFIX.tar {} \;
} # `tapearchiveQobuzdownloadedcontent` 'Qobuz downloaded content tape-archival'
# Create a new tape archive for each of the working directory's subdirectories.

dcal ()
{
	date | grep -C6 --color "\b$(date +%e)\b" && cal | sed -n "1!p" | grep -C6 --color "\b$(date +%e)\b"
} # `dcal` 'Dated Calendar'
# Display a calendar, substitute month of year with current date in full format, and highlight current day of month.

cls ()
{
	clear && printf '\e[3J'
} # `cls` 'MS-DOS, OS/2 & Microsoft Windows CLS'
# Clear the terminal screen if this is possible, then write the VT100 escape code for resetting the terminal to the standard output under the control of the format.

updatesystemsoftware ()
{
	sudo softwareupdate -i -a
	brew update && brew upgrade && brew cleanup
	sudo gem update --system && sudo gem update && sudo gem cleanup
} # `updatesystemsoftware` 'Sony System Software Update'
# List all available updates, and install them ; fetch the newest version of Homebrew, upgrade outdated, unpinned brews, and remove any installed formulae older version from the cellar ; update installed gems to the latest versions, and clean up old versions of installed gems.

writemissingNLatEOF ()
{
	sed -i '' -e '$a\'
} # `add_missing_NL_at_EOF` 'Add missing newline at end of file', from Victor Engmark `l0b0`'s `empty_line_before_eof` (https://github.com/l0b0/tilde/blob/e7ccc9a6a3aba2b0216c8e5141554e8a729389ec/.bash_aliases#L474)
# Insert a newline after pre-end of file line if that latter is not empty.

MakeFinderAlias ()
{
	local Location=$(\pwd)
	local File=$1
	local Folder=$2

	if [[ "${File}" == /* ]] && [[ "${Folder}" == /* ]]
	then
		osascript -e "tell application \"Finder\" to make alias file to (POSIX file \"${File//\"/\\\"}\") at (POSIX file \"${Folder//\"/\\\"}\")" -e 'return'
	elif [[ "${File}" == /* ]] && [[ ! "${Folder}" == /* ]]
	then
		osascript -e "tell application \"Finder\" to make alias file to (POSIX file \"${File//\"/\\\"}\") at (POSIX file \"${Location}/${Folder//\"/\\\"}\")" -e 'return'
	elif [[ ! "${File}" == /* ]] && [[ "${Folder}" == /* ]]
	then
		osascript -e "tell application \"Finder\" to make alias file to (POSIX file \"${Location}/${File//\"/\\\"}\") at (POSIX file \"${Folder//\"/\\\"}\")" -e 'return'
	elif [[ ! "${File}" == /* ]] && [[ ! "${Folder}" == /* ]]
	then
		osascript -e "tell application \"Finder\" to make alias file to (POSIX file \"${Location}/${File//\"/\\\"}\") at (POSIX file \"${Location}/${Folder//\"/\\\"}\")" -e 'return'
	fi
} # `MakeFinderAlias`
# Make Finder aliases [2018.04.18, 17:04:00 : Ça doit être la shell function la plus dégueulasse que j'ai écrit. It doesn't handle any and all relative paths. I don't care anyway. I've been jacking with this stuff almost all afternoon.]
