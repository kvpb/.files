#!/usr/bin/env bash
exec 2>> ${HOME}/Temporary/log
set -xv

printf '%s\n' ''
printf '                         '; printf '\033[48:2:255:165:0m\033[48;2;255;255;255;0#m%s\033[m\n' '     | | |           ,'
printf '                         '; printf '\033[48;2;255;165;0m\033[48;2;255;255;255;0#m%s\033[m\n' '     | | |-. | | |^. |-  | |'
printf '                         '; printf '\033[48;2;255;165;0m\033[48;2;255;255;255;0#m%s\033[m\n' '  .  |/| |_/ |/| | | \__ |/|'
printf '%s\n' ''
printf '                                 LICENSED BY\n'
printf '                                 ${LICENSOR}\n'
printf '%s\n' ''
printf '%s\n' "                            K K  V V  PPP  BB   '   SS"
printf '%s\n' '                           KK   V V  PPP  BBB      S'
printf '%s\n' '                          K K   V   P    BBB     SS'
printf '%s\n' ''
printf '%s\n' '                 WARNING: USE THIS SCRIPT AT YOUR OWN RISK.'
printf '%s\n' ''
printf '\033[48;2;255;165;255;0#m%s\033[m\n' " ALL THE COMPUTER PROGRAMS  AND SOFTWARE ARE PROVIDED 'AS IS'  WITHOUT WARRANTY"
printf '%s\n' ' OF ANY KIND.  WE MAKE NO WARRANTIES,  EXPRESS  OR IMPLIED,  THAT THEY ARE FREE'
printf '%s\n' ' OF ERROR,  OR ARE CONSISTENT  WITH ANY PARTICULAR STANDARD OF MERCHANTABILITY,'
printf '%s\n' ' OR THAT THEY WILL MEET YOUR REQUIREMENTS FOR ANY PARTICULAR APPLICATION.  THEY'
printf '%s\n' ' SHOULD NOT BE  RELIED ON FOR SOLVING A PROBLEM  WHOSE INCORRECT SOLUTION COULD'
printf '%s\n' ' RESULT  IN  INJURY  TO  A  PERSON  OR  LOSS  OF  PROPERTY.  IF YOU DO USE THEM'
printf '%s\n' ' IN SUCH A MANNER,  IT IS AT YOUR OWN RISK.  THE AUTHOR  AND PUBLISHER DISCLAIM'
printf '%s\n' ' ALL LIABILITY FOR  DIRECT,  INDIRECT,  OR CONSEQUENTIAL DAMAGES RESULTING FROM'
printf '%s\n' ' YOUR USE OF THE PROGRAMS.'
printf '%s\n' ''
# Display the title screen with disclaimer.

sudo -v # Ask for an administrator password.
#while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null & # Update the sudo timestamp, until the script is over.

printf '\033[48;2;255;255;0;0#m%s\033[m\n' 'First-Party Settings: Systemwide And User-Specific Preferences'

printf '%s\n' 'Unnamed'

printf '%s\n' 'dash dash/sh boolean false' | sudo debconf-set-selections
sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
printf '%s\n' 'dash dash/sh boolean true' | sudo debconf-set-selections
# Set the default system shell.

printf '%s\n' 'Network'

s[0]="${USER^^}" # requires BASH 4+.
s[1]="$(. /etc/os-release && printf '%s' ${NAME})"
[ -z "$(sudo dmesg | grep 'QEMU\|VirtualBox\|VMware\|Parallels' 2>/dev/null)" ] && s[2]='PC' || s[2]='VM'
sudo hostname "${s_0}s${s_1}${s_2}"
unset s
# Set the host name of the operating system.

sh ./bin/patchhosts.sh # Set the static table lookup for hostnames.

printf '%s\n' 'Keyboard'

gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 20 # 
gsettings set org.gnome.desktop.peripherals.keyboard delay 200 # 



printf '%s\n' 'Dock'

gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'LEFT' # 

gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false # 

gsettings set org.gnome.shell.extensions.dash-to-dock unity-backlit-items false # 

gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 24 # 

gsettings set org.gnome.shell favorite-apps "[
	'terminator.desktop',
	'org.gnome.Terminal.desktop',
	'org.gnome.Nautilus.desktop',
	'firefox.desktop',
	'gnome-system-monitor_gnome-system-monitor.desktop',
	'xpad.desktop',
	'code.desktop',
	'org.gnome.gedit.desktop',
	'libreoffice-writer.desktop',
	'gimp.desktop',
	'inkscape.desktop',
	'vlc.desktop',
	'ProtonMail_Bridge.desktop',
	'org.gnome.Geary.desktop',
	'signal-desktop.desktop',
	'org.kde.kaddressbook.desktop',
	'transmission-gtk.desktop'
]" # 



printf '%s\n' 'Files'

gsettings set org.gtk.Settings.FileChooser show-hidden 'true' # 

gsettings set org.gnome.nautilus.preferences search-filter-time-type 'last_modified' # 
gsettings set org.gnome.nautilus.preferences default-sort-order 'name' # 
gsettings set org.gnome.nautilus.preferences recursive-search 'always' # 
gsettings set org.gnome.nautilus.preferences open-folder-on-dnd-hover false # 
gsettings set org.gnome.nautilus.preferences default-sort-in-reverse-order false # 
gsettings set org.gnome.nautilus.preferences show-hidden-files false # 
gsettings set org.gnome.nautilus.preferences tabs-open-position 'after-current-tab' # 
gsettings set org.gnome.nautilus.preferences always-use-location-entry false # 
gsettings set org.gnome.nautilus.preferences show-image-thumbnails 'never' # 
gsettings set org.gnome.nautilus.preferences confirm-trash true # 
gsettings set org.gnome.nautilus.preferences search-view 'list-view' # 
gsettings set org.gnome.nautilus.preferences thumbnail-limit uint64 10 # 
gsettings set org.gnome.nautilus.preferences mouse-back-button 8 # 
gsettings set org.gnome.nautilus.preferences click-policy 'double' # 
gsettings set org.gnome.nautilus.preferences mouse-forward-button 9 # 
gsettings set org.gnome.nautilus.preferences show-create-link true # 
gsettings set org.gnome.nautilus.preferences show-directory-item-counts 'always' # 
gsettings set org.gnome.nautilus.preferences mouse-use-extra-buttons true # 
gsettings set org.gnome.nautilus.preferences executable-text-activation 'display' # 
gsettings set org.gnome.nautilus.preferences show-delete-permanently true # 
gsettings set org.gnome.nautilus.preferences fts-enabled true # 
gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view' # 
gsettings set org.gnome.nautilus.preferences use-experimental-views false # 
gsettings set org.gnome.nautilus.preferences install-mime-activation true # 

#gsettings set org.gnome.desktop.background picture-uri 'file:////usr/share/gnome-control-center/pixmaps/noise-texture-light.png' # Set the default desktop background.
gsettings set org.gnome.desktop.background picture-options 'none'
gsettings set org.gnome.desktop.background primary-color '#000000'
# Set the background of the desktop. # I want a permanent terminal emulator as a wallpaper. How do I get that?



printf '\033[48;2;255;255;0;0#m%s\033[m\n' 'Second-Party Settings: User-Specific Filesystem Customs'

cd \
&& mkdir -p ${HOME}/Temporary \
&& wget https://github.com/kvpb/.files/archive/master.zip --directory-prefix=${HOME}/Temporary \
&& unzip ${HOME}/Temporary/master.zip -d ${HOME}/Temporary \
&& mv ${HOME}/Temporary/.files-master ${HOME}/Temporary/.files \
&& mv ${HOME}/Temporary/.files ${HOME}/.files \
&& rm -rf ${HOME}/Temporary/master.zip
&& cd ${workingdirectory}
# Download .files/ from GitHub to ${HOME}/.

if [ -d "${HOME}/{Applications,bin,Miscellaneous,Work}" ]
then
	if [ -L "${HOME}/{Applications,bin,Miscellaneous,Work}" ]
	then
		mv "${HOME}/{Applications,bin,Miscellaneous,Work}" ${HOME}/.local/share/Trash/
		mkdir "${HOME}/{Applications,bin,Miscellaneous,Work}"
	fi
else
	mkdir -p "${HOME}/{Applications,bin,Miscellaneous,Work}"
fi
# If Applications, bin, Miscellaneous and Work are not directories in ${HOME}/, substitute symbolic links by or add these directories.
if [ -d "${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/Downloads" ]
then
	if [ -L "${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/Downloads" ]
	then
		mv "${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/Downloads" ${HOME}/.local/share/Trash/
		mkdir "${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/Downloads"
	fi
else
	mkdir -p "${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/Downloads"
fi
# If Downloads is not a directory in ${HOME}/{Documents,Miscellaneous,Music,Pictures,Videos}/, substitute symbolic links by or add these directories.
if [ -d "${HOME}/Pictures/{DCIM}" ]
then
	if [ -L "${HOME}/Pictures/{DCIM}" ]
	then
		mv "${HOME}/Pictures/{DCIM}" ${HOME}/.local/share/Trash/
		mkdir "${HOME}/Pictures/{DCIM}"
	fi
else
	mkdir -p "${HOME}/Pictures/{DCIM}"
fi
# If DCIM is not a directory in ${HOME}/, substitute symbolic links by or add theis directories.

for i in .inputrc .shrc .shinit .profile .exports .functions .aliases .bashrc .profile .exports .functions .aliases .bashrc .bash_login .bash_profile .bash_logout .bash_prompt .zshrc .zprofile .ssh .vimrc .vim .gitconfig .gitignore_global
do
	if [ -e ${i} ]
	then
		if [ -f ${i} -o -d ${i} ]
		then
			mv ${i} ${HOME}/.local/share/Trash/
			xdg-open ${HOME}/.local/share/Trash/
		elif [ -L ${i} ]
		then
			unlink ${i}
		fi
	fi
done
ln -s ${HOME}/.files/.inputrc ${HOME}/.inputrc
#ln -s ${HOME}/.files/.shrc ${HOME}/.shrc
#ln -s ${HOME}/.files/.shinit ${HOME}/.shinit
#ln -s ${HOME}/.files/.profile ${HOME}/.profile
ln -s ${HOME}/.files/.bashrc ${HOME}/.bashrc
ln -s ${HOME}/.files/.bash_login ${HOME}/.bash_login
ln -s ${HOME}/.files/.bash_profile ${HOME}/.bash_profile
ln -s ${HOME}/.files/.bash_logout ${HOME}/.bash_logout
ln -s ${HOME}/.files/.bash_prompt ${HOME}/.bash_prompt
ln -s ${HOME}/.files/.zshrc ${HOME}/.zshrc
ln -s ${HOME}/.files/.zprofile ${HOME}/.zprofile
#ln -s ${HOME}/.files/.ssh ${HOME}/.ssh
ln -s ${HOME}/.files/.vimrc ${HOME}/.vimrc
ln -s ${HOME}/.files/.vim ${HOME}/.vim
ln -s ${HOME}/.files/.gitconfig ${HOME}/.gitconfig
ln -s ${HOME}/.files/.gitignore_global ${HOME}/.gitignore_global
ln -s ${HOME}/Miscellaneous/Downloads ${HOME}/Downloads/Miscellaneous
ln -s ${HOME}/Documents/Downloads ${HOME}/Downloads/Documents
ln -s ${HOME}/Pictures/Downloads ${HOME}/Downloads/Pictures
ln -s ${HOME}/Movies/Downloads ${HOME}/Downloads/Movies
ln -s ${HOME}/Music/Downloads ${HOME}/Downloads/Music
ln -s ${HOME}/Pictures/DCIM ${HOME}/DCIM
ln -s ${HOME}/.local/share/Trash ${HOME}/.Trash
# Create user-specific custom symbolic links.

:> ${HOME}/.hushlogin # Write the .hushlogin file in the current user's home folder.

#sed -i '/Icon/d' "/var/lib/AccountsService/${USER}"
#find ${HOME} -mindepth 0 -type f -name Screen\ Shot\ 2015-11-04\ at\ 5.18.34\ PM.png -exec rsync -aHAX {} /home/kvpb/.face/ \;
# Set my user picture.



printf '\033[48;2;255;255;0;0#m%s\033[m\n' 'Third-Party: Systemwide And User-Specific Xenogenetic Software & Preferences'

printf '%s\n' 'BASH'

sudo apt-get upgrade -qq bash # Download and update BASH.

printf '%s\n' 'ZSH'

sudo apt-get install -qq zsh # Download and update ZSH.

printf '%s\n' 'Rust'

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh # Install Rust. https://www.rust-lang.org/tools/install

printf '%s\n' 'Go'

sudo apt-get install -qq golang #golang-go
sudo apt-get install -qq gccgo #gccgo-go
# Download and install Go.

printf '%s\n' 'Python'

sudo apt-get install -qq python3
sudo apt-get remove -qq python-is-python2
sudo apt-get install -qq python-is-python3
sudo apt-get install -qq python2
# Download and install Python 3.10 and 2.7.

#printf '%s\n' 'Ruby'
#
#sudo apt-get install -qq ruby # Download and install Ruby.

printf '%s\n' 'Node.js & NPM'

#sudo apt-get install -y nodejs npm # Download and install Node.js & NPM.
wget -qO- https://deb.nodesource.com/setup_14.x | sudo -E bash -
sudo apt-get install -qq nodejs
# Download and install Node.js 14.x LTS & NPM

printf '%s\n' 'Octave'

sudo apt-get install -qq octave # Download and install Octave.

printf '%s\n' 'Media Transfer Protocol (MTP)'

sudo apt-get install -qq go-mtpfs
sudo apt-get install -qq libmtp
sudo apt-get install -qq mtpfs
sudo apt-get install -qq mtp-tools
sudo apt-get install -qq jmtpfs
# Download and install MTP.

printf '%s\n' 'KVM'

sudo apt-get install -qq kvm # Download and install KVM.

printf '%s\n' 'QEMU'

sudo apt-get install -qq qemu # Download and install QEMU.

printf '%s\n' 'OpenSSH'

sudo apt-get install -qq ssh # Download and install OpenSSH.

printf '%s\n' 'OpenSSL'

sudo apt-get install -qq openssl # Download and install OpenSSL.

printf '%s\n' 'MOSH'

sudo apt-get install -qq mosh # Download and install MOSH.

printf '%s\n' 'Git'

sudo apt-get upgrade -qq git # Download and update Git.

printf '%s\n' 'Wget'

sudo apt-get upgrade -qq wget # Download and update Wget.

printf '%s\n' 'CURL'

sudo apt-get install -qq curl # Download and install CURL.

printf '%s\n' 'XATTR'

sudo apt-get install -qq xattr # Download and install XATTR.

printf '%s\n' 'Vi Improved'

sudo apt-get install -qq vim # Download and install VIM.

printf '%s\n' 'FSWatch'

sudo apt-get install -qq fswatch # Download and install FSWatch.

printf '%s\n' 'Tree'

sudo apt-get install -qq tree # Download and install Tree.

printf '%s\n' 'HTOP'

sudo apt-get install -qq htop # Download and install HTOP.

printf '%s\n' 'The Fuck'

sudo apt-get install -qq thefuck # Download and install The Fuck.

printf '%s\n' 'TMUX'

sudo apt-get install -qq tmux # Download and install TMUX.

printf '%s\n' 'FFMPEG'

sudo apt-get install -qq ffmpeg # Download and install FFMPEG.

printf '%s\n' 'Terminator'

sudo apt-get install -qq terminator # Download and install Terminator.

#printf '%s\n' 'VMware Workstation Player'
#
#sudo apt-get install gcc build-essential -y
#chmod +x VMware-Player-14.0.0-6661328.x86_64.bundle
#gksudo bash VMware-Player-14.0.0-6661328.x86_64.bundle
# Download and install VMware Workstation Player. https://help.ubuntu.com/community/VMware/Player

printf '%s\n' 'Visual Studio Code'

sudo snap install --classic code # Download and install VS Code. https://code.visualstudio.com/docs/setup/linux

printf '%s\n' 'Xpad'

sudo apt-get install -qq xpad # Download and install Xpad.

printf '%s\n' 'Joplin'

#JoplinAppImage='Joplin-2.4.9.AppImage'
#JoplinAppImageURL="https://github.com/laurent22/joplin/releases/download/v2.4.9/Joplin-2.4.9.AppImage"
#wget -q ${JoplinAppImageURL}
#chmod +x ${JoplinAppImage}
#mv ${JoplinAppImage} ${HOME}/Applications/
# 'On Linux, the recommended way is to use the following installation script as it will handle the desktop icon too:' https://joplinapp.org/help/#desktop-applications
wget -O - https://raw.githubusercontent.com/laurent22/joplin/dev/Joplin_install_and_update.sh | bash
# 'Important: First, install Node 12+.' https://joplinapp.org/help/#terminal-application
NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin
sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin
# 'By default, the application binary will be installed under ~/.joplin-bin. You may change this directory if needed. Alternatively, if your npm permissions are setup as described here (Option 2) then simply running npm -g install joplin would work.' https://joplinapp.org/help/#terminal-application
# Download and install ProtonMail Bridge.

printf '%s\n' 'LibreOffice'

sudo apt-get install -qq libreoffice # Download and install LibreOffice.

printf '%s\n' 'GIMP'

sudo apt-get install -qq gimp # Download and install GIMP.

printf '%s\n' 'Inkscape'

sudo apt-get install -qq inkscape # Download and install Inkscape.

printf '%s\n' 'Handbrake'

sudo apt-get install -qq handbrake # Download and install Handbrake.

printf '%s\n' 'ProtonMail Bridge'

#wget https://protonmail.com/download/protonmail-bridge_1.2.1-1_amd64.deb # 'Download the file to the current working directory.'
#sudo apt-get install debsig-verify debian-keyring # 'Install debsigs to be able to verify the package.'
#gpg --dearmor --output debsig.gpg bridge_pubkey.gpg
#sudo mkdir -p /usr/share/debsig/keyrings/E2C75D68E6234B07
#sudo mv debsig.gpg /usr/share/debsig/keyrings/E2C75D68E6234B07
# 'Import the public key into the keyring.'
#sudo mkdir -p /etc/debsig/policies/E2C75D68E6234B07
#sudo cp bridge.pol /etc/debsig/policies/E2C75D68E6234B07
# 'Install the policy file.'
#if [ $(debsig-verify protonmail-bridge_1.1.6-1_amd64.deb) = "debsig: Verified package from 'Proton Technologies AG (ProtonMail Bridge developers) <bridge@protonmail.ch>' (Proton Technologies AG)" ] # 'Check the DEB file.'
#then
#	sudo apt-get install ./protonmail-bridge_1.1.6-1_amd64.deb
#fi # 'Install the package using [my] package manager.'
#mv ./protonmail-bridge_1.1.6-1_amd64.deb ${HOME}/Downloads/
# Download and install ProtonMail Bridge.
pmbdeb='protonmail-bridge_1.8.10-1_amd64.deb'
pmbdeburl="https://protonmail.com/download/bridge/${pmbdeb}"
wget -q ${pmbdeburl}
sudo apt-get install -qq ./${pmbdeb}
mv ${pmbdeb} ${HOME}/Downloads/
# Download and install ProtonMail Bridge.

printf '%s\n' 'Geary'

sudo apt-get install -qq geary # Download and install Geary.

#printf '%s\n' 'Signal'
#
#wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
#sudo mv signal-desktop-keyring.gpg /usr/share/keyrings/
# '1. Install our official public software signing key'
#echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
#	sudo tee -a /etc/apt/sources.list.d/signal-xenial.list
# '2. Add our repository to your list of repositories'
#sudo apt-get update && sudo apt-get install signal-desktop # '3. Update your package database and install signal'
# 'Linux (Debian-based) Install Instructions' https://signal.org/en/download/
# Download and install Signal.

#printf '%s\n' 'California'
#
#sudo add-apt-repository -y ppa:yorba/daily-builds
#sudo apt-get update --allow-insecure-repositories
#sudo apt-get install california -y
# Download and install California.

printf '%s\n' 'KAddressBook'

sudo apt-get install -qq akonadi*
sudo apt-get install -qq kaddressbook
# Download and install KAddressBook.

printf '%s\n' 'Transmission'

sudo apt-get install -qq transmission # Download and install Transmission.

#printf '%s\n' 'Dropbox'
#
#if [ "$(uname -m)" = 'i386' -o "$(uname -m)" = 'i686' ]
#then
#	cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86" | tar xzf -
#	~/.dropbox-dist/dropboxd
#elif [ "$(uname -m)" = 'x86_64' ]
#then
#	cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
#	~/.dropbox-dist/dropboxd
#else
#	:
#fi
# Download and install Dropbox. https://www.dropbox.com/install-linux

#printf '%s\n' ''
#
#sudo apt-get install -qq  # Download and install .



printf '%s\n' ''
printf '%s\n' 'Ubuntu has been configured.'# ${litcyan}

printf '%s\n' 'A reboot is required for some of these changes to take effect. Reboot...?, \e[4my\e[0mes or \e[4mn\e[0mo?'# ${litgreen}
read -r input
if [[ ${input} =~ ^([Yy]|[Yy][Ee][Ss]|[Yy][Ee][Aa][Hh])$ ]]
then
	sudo shutdown -r now # Reboot without confirmation.
else
	:
fi
exit 0

#	.ubuntu
#	Ubuntu Configuration Script
#
#	Karl V. P. B. `kvpb`
#	+1 (DDD) DDD-DDDD
#	+33 A BB BB BB BB
#	local-part@domain
#	local-part@domain
#	https://www.linkedin.com/in/
#	https://twitter.com/
#	https://github.com/
#	https://vm.tiktok.com//
